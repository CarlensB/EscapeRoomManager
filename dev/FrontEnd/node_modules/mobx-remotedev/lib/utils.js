"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAction = createAction;
exports.getName = getName;
exports.setValue = exports.silently = void 0;

var mobx = _interopRequireWildcard(require("mobx"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getPayload = function getPayload(change) {
  var added = change.added,
      addedCount = change.addedCount,
      index = change.index,
      removed = change.removed,
      removedCount = change.removedCount;
  return {
    index: index,
    added: added && mobx.toJS(added),
    addedCount: addedCount,
    removed: removed && mobx.toJS(removed),
    removedCount: removedCount
  };
};

function createAction(name, change) {
  if (!change) {
    // is action
    return {
      type: name
    };
  }

  var action;

  if (typeof change.newValue !== 'undefined') {
    var key = typeof change.index !== 'undefined' ? change.index : change.name;
    action = _defineProperty({}, key, mobx.toJS(change.newValue));
  } else {
    action = getPayload(change);
  }

  action.type = "\u2503 ".concat(name);
  return action;
}

function getName(obj) {
  if (!obj || !mobx.isObservable(obj)) return '';
  var r = mobx.getDebugName(obj);
  var end = r.indexOf('.');
  if (end === -1) end = undefined;
  return r.substr(0, end);
}
/* eslint-disable no-param-reassign */


var silently = function silently(fn, store) {
  store.__isRemotedevAction = true;
  fn();
  delete store.__isRemotedevAction;
};

exports.silently = silently;

function setValueAction(store, state) {
  silently(function () {
    if (store.importState) {
      store.importState(state);
    } else {
      Object.keys(state).forEach(function (key) {
        store[key] = state[key];
      });
    }
  }, store);
  return state;
}

setValueAction.__isRemotedevAction = true;
var setValue = mobx.action('@@remotedev', setValueAction);
/* eslint-enable */

exports.setValue = setValue;